// Course: CSC 226 Introduction to Programming with C++
// Name: Edward Greathouse and Chloe Conn
// Assignment A14: <This Program is designed to print a graph displaying a specific sum frequency of two dice. >
/*
    Purpose: <The purpose of this project is to demonstrate the ability to use arrays, classes, and the random generator functions.
                This program rolls two dice, the number of times specified by the user. The program then prints a graph displaying
                the number of times each sum was rolled.>
*/
#include <iostream>
#include <ctime>
#include <cmath>
#include <cstdlib>
using namespace std;

//---------------------------------------------------------------------
// Program illustrating use of RandGen and Dice classes
//---------------------------------------------------------------------
class RandGen
{
  public:
    RandGen();                          // set seed for all instances
    int RandInt(int max = RAND_MAX);     // returns int in [0..max)
    int RandInt(int low, int max);      // returns int in [low..max]
    double RandReal();                  // returns double in [0..1)
    double RandReal(double low, double max); // range [low..max]

    static void SetSeed(int seed);      // static (per class) seed set
private:
    static int ourInitialized;          // for 'per-class' initialization
};


class Dice
{
  public:
  	Dice(); 				// default constructor assumes a 6-sided die.
    Dice(int sides);        // constructor for any size dice
    int Roll();             // return the random roll of the die
    int NumSides() const;   // how many sides this die has
    int NumRolls() const;   // # times this die rolled

  private:
    int myRollCount;        // # times die rolled
    int mySides;            // # sides on die
};
void graph (const int asterisks_count[]);       //titles, and sets up the graph
void print_asterisks(int n); // Prints '*' the number of times specifed
void graph_alternative(const int asterisks_count[]); //Scales the graph for really big numbers
//---------------------------------------------------------------------
// main begins here
//---------------------------------------------------------------------

int main()
{
    int twos(0), threes(0), fours(0), fives(0), sixs(0), sevens(0), eights(0), nines(0), tens(0),
        elevens(0), twelves(0), roll_number, temp_max(-1); //declares all the variables used inside main
    int results[13] {0, 0, twos, threes, fours, fives, sixs, sevens, eights, nines, tens, elevens, twelves}; //The array declaration

    const int start=1;
    long int stop;
    cout << "Enter the number of times the dice will be rolled.\n" << endl; //asks user for the number of times the dice will be rolled
    cin >> stop;                        //the number of times to run the loop is entered by the user
    int loopcount =1;

        Dice cube;                      // creates two dice that looks like cubes

        cube.Roll();                    //For debugging purposes, the same number will be generated by EVERY SINGLE first roll.
                                        //So, unless you want the same number for each first roll, we must throw away the first roll.
                                        //which we do by ignoring the first roll and not printing it out.

    cout << "This loop displays "<<stop-start+1 <<" rolls of the sum of two 6-sided dice:\n" << endl;
    for (loopcount=start; loopcount<=stop; loopcount++) //this is where the loop starts counting
        {
           roll_number = cube.Roll(); //the dice is rolled and the sum of both dice is given to roll_number
            if (roll_number==2)//These if statements are if the roll is equal to 2 it will increase the array number
                                //affliated with it by one
            {
                twos=twos +1;
                results[2] = twos;
            }
            if (roll_number==3)
            {
                threes=threes + 1;
                results[3] = threes;
            }
            if (roll_number==4)
            {
                fours= fours + 1;
                results[4] = fours;
            }
            if (roll_number==5)
            {
                 fives= fives + 1;
                 results[5] = fives;
            }
            if (roll_number==6)
            {
                sixs=sixs + 1;
                results[6] = sixs;
            }
            if (roll_number==7)
            {
                sevens=sevens + 1;
                results[7] = sevens;
            }
            if (roll_number==8)
            {
                eights=eights + 1;
                results[8] = eights;
            }
            if (roll_number==9)
            {
                nines=nines + 1;
                results[9] = nines;
            }
            if (roll_number==10)
            {
                tens=tens + 1;
                results[10]= tens;
            }
            if (roll_number==11)
            {
                elevens=elevens + 1;
                results[11] = elevens;
            }
            if (roll_number==12)
            {
                twelves=twelves + 1;
                results[12] = twelves;
            }

        }
        if (results[2] > temp_max)//These if statements determine the max number from the dice roll combinations
        {
        temp_max = results[2];//if the number in the result array is greater than the temp_max then that number becomes the new temp_max
        }
        if (results[3] > temp_max)
        {
        temp_max = results[3];
        }
        if (results[4] > temp_max)
        {
        temp_max = results[4];
        }
        if (results[5] > temp_max)
        {
        temp_max = results[5];
        }
        if (results[6] > temp_max)
        {
        temp_max = results[6];
        }
        if (results[7] > temp_max)
        {
        temp_max = results[7];
        }
        if (results[8] > temp_max)
        {
        temp_max = results[8];
        }
        if (results[9] > temp_max)
        {
        temp_max = results[9];
        }
        if (results[10] > temp_max)
        {
        temp_max = results[10];
        }
        if (results[11] > temp_max)
        {
        temp_max = results[11];
        }
        if (results[12] > temp_max)
        {
        temp_max = results[12];
        }
        if (temp_max>75)//This if statment is to scale larger numbers. So if the number is greater than 75, each asterisk is for
                    //75 rolls.
        {
        results[2] = results[2]/75;
        results[3] = results[3]/75;
        results[4] = results[4]/75;
        results[5] = results[5]/75;
        results[6] = results[6]/75;
        results[7] = results[7]/75;
        results[8] = results[8]/75;
        results[9] = results[9]/75;
        results[10] = results[10]/75;
        results[11] = results[11]/75;
        results[12] = results[12]/75;
        graph_alternative(results);
    }

    return 0;
}

//---------------------------------------------------------------------
// RandGen class functions begin here
//---------------------------------------------------------------------

int RandGen::ourInitialized = 0;

void RandGen::SetSeed(int seed)
// postcondition: system srand() used to initialize seed
//                once per program (This is a static function)
{
    if (0 == ourInitialized)
    {
    ourInitialized = 1;   // only call srand once
	srand(seed);          // randomize
    }
}


RandGen::RandGen()
// postcondition: system srand() used to initialize seed
//                once per program
{
    if (0 == ourInitialized)
    {
    	ourInitialized = 1;          // only call srand once
        srand(unsigned(time(0)));    // randomize
    }
}

int RandGen::RandInt(int max)
// precondition: max > 0
// postcondition: returns int in [0..max)
{
    return int(RandReal() * max);
}

int RandGen::RandInt(int low, int max)
// precondition: low <= max
// postcondition: returns int in [low..max]
{
    return low + RandInt(max-low+1);
}

double RandGen::RandReal()
// postcondition: returns double in [0..1)
{

    return rand() / (double(RAND_MAX) + 1);
}

double RandGen::RandReal(double low, double high)
{
    double width = fabs(high-low);
    double thelow = low < high ? low : high;
    return RandReal()*width + thelow;
}

//---------------------------------------------------------------------
// Dice class functions begin here
//---------------------------------------------------------------------

Dice::Dice()//Default is to assume a six sided die.
// postcondition: all private fields initialized
{
    myRollCount = 0;
    mySides = 6;
}


Dice::Dice(int sides)
// postcondition: all private fields initialized
{
    myRollCount = 0;
    mySides = sides;
}

int Dice::Roll()
// postcondition: number of rolls updated
//                random 'die' roll returned
{
    RandGen gen;    // random number generator

    myRollCount= myRollCount + 1;         // update # of times die rolled
    return gen.RandInt(2,12);

}

int Dice::NumSides() const
// postcondition: return # of sides of die
{
    return mySides;
}

int Dice::NumRolls() const
// postcondition: return # of times die has been rolled
{
    return myRollCount;
}
void print_asterisks(int n)//This function prints the number asterisks that was given as a parameter
{
    for (int count = 1; count <= n; count++)
        cout << "*";
}
void graph (const int asterisks_count[])//This function titles the graph and calls the print_asterisk function to print the asterisks.
{
    int roll_number(2);
    cout << "Number of times each number is rolled.\n" << endl;
    for (int roll_number=2; roll_number <= 12; roll_number++)
    {
        cout << roll_number << ":";
        print_asterisks(asterisks_count[roll_number]);
        cout<< endl;
        cout << endl;
    }
}
void graph_alternative (const int asterisks_count[])//This function does the same thing as the function above except for it is used if
                                                    //the asterisks need to be scaled (larger numbers)
{
    int roll_number(2);
    cout << "* represents 75 rolls\n" << endl;
    for (int roll_number=2; roll_number <= 12; roll_number++)
    {
        cout << roll_number << ":";
        print_asterisks(asterisks_count[roll_number]);
        cout<< endl;
        cout << endl;
    }
}
